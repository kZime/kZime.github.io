<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kZime&#39;s blog</title>
  <subtitle>kZime</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kzime.xyz/"/>
  <updated>2017-08-18T11:01:45.314Z</updated>
  <id>http://kzime.xyz/</id>
  
  <author>
    <name>kZime</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>c++读入比较</title>
    <link href="http://kzime.xyz/2017/06/19/input/"/>
    <id>http://kzime.xyz/2017/06/19/input/</id>
    <published>2017-06-19T09:08:47.000Z</published>
    <updated>2017-08-18T11:01:45.314Z</updated>
    
    <content type="html"><![CDATA[<p>数据: 1e7</p>
<p>数据范围: int</p>
<p>重定向文件读入</p>
<p>优化: 无</p>
<h4 id="cin"><a href="#cin" class="headerlink" title="cin"></a>cin</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="keyword">int</span> n, k;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123; </div><div class="line">        <span class="built_in">cin</span> &gt;&gt; k;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">    real    0m8.912s</div><div class="line">    user    0m8.844s</div><div class="line">    sys     0m0.048s</div><div class="line">*/</div></pre></td></tr></table></figure>
<h4 id="cin-取消兼容stdio"><a href="#cin-取消兼容stdio" class="headerlink" title="cin 取消兼容stdio"></a>cin 取消兼容stdio</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="keyword">int</span> n, k;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123; </div><div class="line">        <span class="built_in">cin</span> &gt;&gt; k;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">	real	0m1.897s</div><div class="line">	user	0m1.844s</div><div class="line">	sys		0m0.032s</div><div class="line">*/</div></pre></td></tr></table></figure>
<h4 id="scanf"><a href="#scanf" class="headerlink" title="scanf"></a>scanf</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="keyword">int</span> n, k;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123; </div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">    real	0m2.180s</div><div class="line">    user	0m2.140s</div><div class="line">    sys	    0m0.028s</div><div class="line">*/</div></pre></td></tr></table></figure>
<h4 id="getchar"><a href="#getchar" class="headerlink" title="getchar()"></a>getchar()</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">gn</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="keyword">int</span> k = <span class="number">0</span>, f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">char</span> c = getchar();</div><div class="line">    <span class="keyword">for</span>(; !<span class="built_in">isdigit</span>(c); c = getchar()) <span class="keyword">if</span>(c == <span class="string">'-'</span>) f = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span>(; <span class="built_in">isdigit</span>(c); c = getchar()) k = k * <span class="number">10</span> + c - <span class="string">'0'</span>;</div><div class="line">    <span class="keyword">return</span> k * f;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="keyword">int</span> n, k;</div><div class="line">    n = gn();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123; </div><div class="line">        k = gn();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">	real	0m1.642s</div><div class="line">	user	0m1.588s</div><div class="line">	sys		0m0.052s</div><div class="line">*/</div></pre></td></tr></table></figure>
<h4 id="fread"><a href="#fread" class="headerlink" title="fread()"></a>fread()</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">getc</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">1</span> &lt;&lt; <span class="number">18</span>], *fs, *ft;</div><div class="line">    <span class="keyword">return</span> (fs == ft &amp;&amp; (ft = (fs = buf) + fread(buf, <span class="number">1</span>, <span class="number">1</span> &lt;&lt; <span class="number">18</span>, <span class="built_in">stdin</span>)), fs == ft) ? EOF : *fs++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">gn</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="keyword">register</span> <span class="keyword">int</span> k = <span class="number">0</span>, f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c = getc();</div><div class="line">    <span class="keyword">for</span>(; !<span class="built_in">isdigit</span>(c); c = getc()) <span class="keyword">if</span>(c == <span class="string">'-'</span>) f = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span>(; <span class="built_in">isdigit</span>(c); c = getc()) k = k * <span class="number">10</span> + c - <span class="string">'0'</span>;</div><div class="line">    <span class="keyword">return</span> k * f;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="keyword">int</span> n, k;</div><div class="line">    n = gn();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123; </div><div class="line">        k = gn();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">	real	0m0.648s</div><div class="line">	user	0m0.608s</div><div class="line">	sys		0m0.036s</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>显而易见，在OI系列比赛中，快读保平安233</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据: 1e7&lt;/p&gt;
&lt;p&gt;数据范围: int&lt;/p&gt;
&lt;p&gt;重定向文件读入&lt;/p&gt;
&lt;p&gt;优化: 无&lt;/p&gt;
&lt;h4 id=&quot;cin&quot;&gt;&lt;a href=&quot;#cin&quot; class=&quot;headerlink&quot; title=&quot;cin&quot;&gt;&lt;/a&gt;cin&lt;/h4&gt;&lt;figure c
    
    </summary>
    
      <category term="随笔" scheme="http://kzime.xyz/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>[题目] 网络流和线性规划24题</title>
    <link href="http://kzime.xyz/2017/06/19/Network-flow/"/>
    <id>http://kzime.xyz/2017/06/19/Network-flow/</id>
    <published>2017-06-19T07:00:43.000Z</published>
    <updated>2017-08-18T11:01:45.318Z</updated>
    
    <content type="html"><![CDATA[<p>好久之前就想搞个这个了。。</p>
<table>
<thead>
<tr>
<th style="text-align:center">问题编号</th>
<th style="text-align:center">问题名称</th>
<th style="text-align:center">问题模型</th>
<th style="text-align:center">转化模型</th>
<th style="text-align:center">完成情况</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center"><a href="http://cogs.pro/cogs/problem/problem.php?pid=14" target="_blank" rel="external">飞行员配对方案问题</a></td>
<td style="text-align:center">二分图最大匹配</td>
<td style="text-align:center">网络最大流</td>
<td style="text-align:center"><a href="http://cogs.pro/cogs/submit/code.php?id=396316" target="_blank" rel="external">√</a></td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center"><a href="http://cogs.pro/cogs/problem/problem.php?pid=727" target="_blank" rel="external">太空飞行计划问题</a></td>
<td style="text-align:center">最大权闭合图</td>
<td style="text-align:center">网络最小割</td>
<td style="text-align:center"><a href="http://cogs.pro/cogs/submit/code.php?id=417385" target="_blank" rel="external">√</a></td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center"><a href="http://cogs.pro/cogs/problem/problem.php?pid=728" target="_blank" rel="external">最小路径覆盖问题</a></td>
<td style="text-align:center">有向无环图最小路径覆盖</td>
<td style="text-align:center">网络最大流</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center"><a href="http://cogs.pro/cogs/problem/problem.php?pid=1302" target="_blank" rel="external">魔术球问题简化/普通</a></td>
<td style="text-align:center">有向无环图最小路径覆盖</td>
<td style="text-align:center">网络最大流</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center"><a href="http://cogs.pro/cogs/problem/problem.php?pid=729" target="_blank" rel="external">圆桌问题</a></td>
<td style="text-align:center">二分图多重匹配</td>
<td style="text-align:center">网络最大流</td>
<td style="text-align:center"><a href="http://cogs.pro/cogs/submit/code.php?id=394782" target="_blank" rel="external">√</a></td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center"><a href="http://cogs.pro/cogs/problem/problem.php?pid=731" target="_blank" rel="external">最长递增子序列问题</a></td>
<td style="text-align:center">最多不相交路径</td>
<td style="text-align:center">网络最大流</td>
<td style="text-align:center"><a href="http://cogs.pro/cogs/submit/code.php?id=395947" target="_blank" rel="external">√</a></td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center"><a href="http://cogs.pro/cogs/problem/problem.php?pid=732" target="_blank" rel="external">试题库问题</a></td>
<td style="text-align:center">二分图多重匹配</td>
<td style="text-align:center">网络最大流</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center"><a href="http://cogs.pro/cogs/problem/problem.php?pid=733" target="_blank" rel="external">机器人路径规划问题</a></td>
<td style="text-align:center">(未解决)</td>
<td style="text-align:center">最小费用最大流</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center"><a href="http://cogs.pro/cogs/problem/problem.php?pid=734" target="_blank" rel="external">方格取数问题</a></td>
<td style="text-align:center">二分图点权最大独立集</td>
<td style="text-align:center">网络最小割</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center"><a href="http://cogs.pro/cogs/problem/problem.php?pid=461" target="_blank" rel="external">餐巾计划问题</a></td>
<td style="text-align:center">线性规划网络优化</td>
<td style="text-align:center">最小费用最大流</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center"><a href="http://cogs.pro/cogs/problem/problem.php?pid=735" target="_blank" rel="external">航空路线问题</a></td>
<td style="text-align:center">最长不相交路径</td>
<td style="text-align:center">最小费用最大流</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td style="text-align:center"><a href="http://cogs.pro/cogs/problem/problem.php?pid=439" target="_blank" rel="external">软件补丁问题</a></td>
<td style="text-align:center">最小转移代价</td>
<td style="text-align:center">最短路径</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td style="text-align:center"><a href="http://cogs.pro/cogs/problem/problem.php?pid=736" target="_blank" rel="external">星际转移问题</a></td>
<td style="text-align:center">网络判定</td>
<td style="text-align:center">网络最大流</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">14</td>
<td style="text-align:center"><a href="http://cogs.pro/cogs/problem/problem.php?pid=44" target="_blank" rel="external">孤岛营救问题</a></td>
<td style="text-align:center">分层图最短路径</td>
<td style="text-align:center">最短路径</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td style="text-align:center"><a href="http://cogs.pro/cogs/problem/problem.php?pid=737" target="_blank" rel="external">汽车加油行驶问题</a></td>
<td style="text-align:center">分层图最短路径</td>
<td style="text-align:center">最短路径</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">16</td>
<td style="text-align:center"><a href="http://cogs.pro/cogs/problem/problem.php?pid=738" target="_blank" rel="external">数字梯形问题</a></td>
<td style="text-align:center">最大权不相交路径</td>
<td style="text-align:center">最小费用最大流</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">17</td>
<td style="text-align:center"><a href="http://cogs.pro/cogs/problem/problem.php?pid=739" target="_blank" rel="external">运输问题</a></td>
<td style="text-align:center">网络费用流量</td>
<td style="text-align:center">最小费用最大流</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">18</td>
<td style="text-align:center"><a href="http://cogs.pro/cogs/problem/problem.php?pid=740" target="_blank" rel="external">分配问题</a></td>
<td style="text-align:center">二分图最佳匹配</td>
<td style="text-align:center">最小费用最大流</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">19</td>
<td style="text-align:center"><a href="http://cogs.pro/cogs/problem/problem.php?pid=741" target="_blank" rel="external">负载平衡问题</a></td>
<td style="text-align:center">最小代价供求</td>
<td style="text-align:center">最小费用最大流</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">20</td>
<td style="text-align:center"><a href="http://cogs.pro/cogs/problem/problem.php?pid=742" target="_blank" rel="external">深海机器人问题</a></td>
<td style="text-align:center">线性规划网络优化</td>
<td style="text-align:center">最小费用最大流</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">21</td>
<td style="text-align:center"><a href="http://cogs.pro/cogs/problem/problem.php?pid=743" target="_blank" rel="external">最长k可重区间集问题</a></td>
<td style="text-align:center">最大权不相交路径</td>
<td style="text-align:center">最小费用最大流</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">22</td>
<td style="text-align:center"><a href="http://cogs.pro/cogs/problem/problem.php?pid=744" target="_blank" rel="external">最长k可重线段集问题</a></td>
<td style="text-align:center">最大权不相交路径</td>
<td style="text-align:center">最小费用最大流</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">23</td>
<td style="text-align:center"><a href="http://cogs.pro/cogs/problem/problem.php?pid=745" target="_blank" rel="external">火星探险问题</a></td>
<td style="text-align:center">线性规划网络优化</td>
<td style="text-align:center">最小费用最大流</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">24</td>
<td style="text-align:center"><a href="http://cogs.pro/cogs/problem/problem.php?pid=746" target="_blank" rel="external">骑士共存</a></td>
<td style="text-align:center">二分图最大独立集</td>
<td style="text-align:center">网络最小割</td>
</tr>
</tbody>
</table>
<p>markdown 打这个表炒鸡累啊啊啊</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久之前就想搞个这个了。。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;问题编号&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;问题名称&lt;/th&gt;
&lt;th style=&quot;text-al
    
    </summary>
    
      <category term="题目" scheme="http://kzime.xyz/categories/%E9%A2%98%E7%9B%AE/"/>
    
    
      <category term="网络流" scheme="http://kzime.xyz/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="图论" scheme="http://kzime.xyz/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="二分图" scheme="http://kzime.xyz/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>[BYVoid S1] 灵魂分流药剂</title>
    <link href="http://kzime.xyz/2017/06/19/soultap/"/>
    <id>http://kzime.xyz/2017/06/19/soultap/</id>
    <published>2017-06-19T02:02:20.000Z</published>
    <updated>2017-08-18T11:01:45.350Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><blockquote>
<p>幽暗城皇家炼金师赫布瑞姆刚刚发明了一种用来折磨战俘的新型药 剂，这种药剂被称为灵魂分流药剂。灵魂分流药剂的妙处在于能够给战俘带来巨大的痛苦，但是却不会让战俘死去。这种药剂中包含了一些治疗的成分，所以即使战 俘想自尽，也会被救活。用这种求生不得，求死不能的感觉，来对付反对希尔瓦娜斯女王的狂徒们，实在是太美妙了。当然，灵魂分流药剂要限定在一个用量范围之 内，过少会达不到效果，而过多会直接杀了战俘。</p>
<p>最近，我们抓获了一个来自暴风城的探子，他掌握了我们的许多重要情报。希尔瓦娜斯女王命令你用最痛苦的手段折磨他。你从你的导师，灵魂分流药剂的发明者——皇家炼金师赫布瑞姆那里获得了N瓶药剂。每瓶按照药性的不同装在M个箱子中。每瓶药剂都有一个规格：对服用者造成的肉体伤害w，对服用者造成的意志折磨v，所属的箱子t，和对服用者造成的痛苦值p。</p>
<p>据我们测试，那个暴风城探子的生命值为A，意志力为B。你要从每个箱子中最多拿取1瓶药剂喂给他。注意，喂给他的药剂造成的总肉体伤害不能超过他的生命值A，否则他会死去，总意志折磨不能超过他的意志力B，否则他会精神崩溃，我们没有必要给一个精神崩溃的傻瓜制造那么多痛苦。在不让他死去或者精神崩溃的前提下，你要尽可能多的给他制造痛苦，你能解决这个问题吗？</p>
</blockquote>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><blockquote>
<p>第1行：四个整数N,M,A,B，M个箱子的编号为1..M。</p>
<p>第2行至第N+1行：第i+1行四个整数w,v,t,p表示第i瓶药剂的肉体伤害，意志折磨，所属箱子的编号，和造成的痛苦值。</p>
</blockquote>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><blockquote>
<p>第1行：一个整数，表示能够造成的最大的痛苦值。</p>
</blockquote>
<h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">5 3 20 20</div><div class="line">5 10 1 200</div><div class="line">10 5 1 100</div><div class="line">8 11 2 56</div><div class="line">10 10 2 50</div><div class="line">5 5 3 100</div></pre></td></tr></table></figure>
<h4 id="output"><a href="#output" class="headerlink" title="output"></a>output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">300</div></pre></td></tr></table></figure>
<h4 id="数据规模"><a href="#数据规模" class="headerlink" title="数据规模"></a>数据规模</h4><blockquote>
<p>对于30%的数据</p>
<p>N&lt;=30</p>
<p>M&lt;=5</p>
<p>对于100%的数据</p>
<p>N&lt;=100</p>
<p>M&lt;=10</p>
<p>A,B&lt;=100</p>
</blockquote>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>裸的二维背包。。注意数据格式</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">getc</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">1</span> &lt;&lt; <span class="number">18</span>], *fs, *ft;</div><div class="line">    <span class="keyword">return</span> (fs == ft &amp;&amp; (ft = (fs = buf) + fread(buf, <span class="number">1</span>, <span class="number">1</span> &lt;&lt; <span class="number">18</span>, <span class="built_in">stdin</span>)), fs == ft) ? EOF : *fs++;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">gn</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="keyword">register</span> <span class="keyword">int</span> k = <span class="number">0</span>, f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c = getc();</div><div class="line">    <span class="keyword">for</span>(; !<span class="built_in">isdigit</span>(c); c = getc()) <span class="keyword">if</span> (c == <span class="string">'-'</span>) f = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span>(; <span class="built_in">isdigit</span>(c); c = getc()) k = k * <span class="number">10</span> + c - <span class="string">'0'</span>;</div><div class="line">    <span class="keyword">return</span> k * f;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> f[<span class="number">102</span>][<span class="number">102</span>][<span class="number">102</span>], n, m, a, b, w[<span class="number">102</span>], v[<span class="number">102</span>], p[<span class="number">102</span>], ans;</div><div class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; box[<span class="number">12</span>];</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line"><span class="meta"># <span class="meta-keyword">ifndef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"soultap.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"soultap.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line"><span class="meta"># <span class="meta-keyword">else</span> </span></div><div class="line">    freopen(<span class="string">"in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="meta"># <span class="meta-keyword">endif</span></span></div><div class="line">    n = gn(), m = gn(), a = gn(), b = gn();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t, i = <span class="number">1</span>; i &lt;= n; i++) &#123; </div><div class="line">        w[i] = gn(), v[i] = gn(), t = gn(), p[i] = gn();</div><div class="line">        box[t].push_back(i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123; </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= a; j++) &#123; </div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= b; k++) &#123; </div><div class="line">                f[i][j][k] = f[i - <span class="number">1</span>][j][k];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> o = <span class="number">0</span>; o &lt; box[i].size(); o++) &#123; </div><div class="line">            <span class="keyword">int</span> tmp = box[i][o];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = w[tmp]; j &lt;= a; j++) &#123; </div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = v[tmp]; k &lt;= b; k++) &#123; </div><div class="line">                    f[i][j][k] = max(f[i][j][k], f[i - <span class="number">1</span>][j - w[tmp]][k - v[tmp]] + p[tmp]);</div><div class="line">                    ans = max(ans, f[i][j][k]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;幽暗城皇家炼金师赫布瑞姆刚刚发明了一种用来折磨战俘的新型药 剂，这种药剂被称为灵魂分流药剂。灵魂分流药剂的妙处在于
    
    </summary>
    
      <category term="题解" scheme="http://kzime.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="背包" scheme="http://kzime.xyz/tags/%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>[USACO5.4]奶牛的电信Telecowmunication</title>
    <link href="http://kzime.xyz/2017/06/18/Telecowmunication/"/>
    <id>http://kzime.xyz/2017/06/18/Telecowmunication/</id>
    <published>2017-06-18T12:13:44.000Z</published>
    <updated>2017-08-18T11:01:45.310Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题面描述"><a href="#题面描述" class="headerlink" title="题面描述"></a>题面描述</h3><blockquote>
<p>农夫约翰的奶牛们喜欢通过电邮保持联系，于是她们建立了一个奶牛电脑网络，以便互相交流。这些机器用如下的方式发送电邮：如果存在一个由c台电脑组成的序列a1,a2,…,a(c)，且a1与a2相连，a2与a3相连，等等，那么电脑a1和a(c)就可以互发电邮。</p>
<p>很不幸，有时候奶牛会不小心踩到电脑上，农夫约翰的车也可能碾过电脑，这台倒霉的电脑就会坏掉。这意味着这台电脑不能再发送电邮了，于是与这台电脑相关的连接也就不可用了。</p>
<p>有两头奶牛就想：如果我们两个不能互发电邮，至少需要坏掉多少台电脑呢？请编写一个程序为她们计算这个最小值。</p>
<p>以如下网络为例:</p>
<p>​      1</p>
<p>  /  </p>
<p>3   —-   2</p>
<p>这张图画的是有2条连接的3台电脑。我们想要在电脑1和2之间传送信息。电脑1与3、2与3直接连通。如果电脑3坏了，电脑1与2便不能互发信息了。</p>
</blockquote>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><blockquote>
<p>第一行 四个由空格分隔的整数：N,M,c1,c2.N是电脑总数，电脑由1到N编号。M是电脑之间连接的总数。最后的两个整数c1和c2是上述两头奶牛使用的电脑编号。连接没有重复且均为双向的(即如果c1与c2相连，那么c2与c1也相连)。两台电脑之间至多有一条连接。电脑c1和c2不会直接相连。</p>
<p>第2到M+1行 接下来的M行中，每行包含两台直接相连的电脑的编号。</p>
</blockquote>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><blockquote>
<p>一个整数表示使电脑c1和c2不能互相通信需要坏掉的电脑数目的最小值。</p>
</blockquote>
<h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">3 2 1 2</div><div class="line">1 3</div><div class="line">2 3</div></pre></td></tr></table></figure>
<h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1</div></pre></td></tr></table></figure>
<h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><blockquote>
<p>1&lt;=N&lt;=100,   1&lt;=M&lt;=600</p>
</blockquote>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>求最小割点集的大小</p>
<p>将每个点拆成点$u$和点$u + n$，从$u$到$u+ n$ 连一条边权为$1$的边。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">addedge(u, u + n, <span class="number">1</span>);</div><div class="line">addedge(u + n, u, <span class="number">0</span>);</div></pre></td></tr></table></figure>
<p>对于图中原来存在的边$u \implies v$ ，使$u + n$连向$v$， $v + n$ 连向$u$ ，边权都为无穷大。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">addedge(u + n, v, INF);</div><div class="line">addedge(v, u + n, <span class="number">0</span>);</div><div class="line">addedge(v + n, u, INF);</div><div class="line">addedge(u, v + n, <span class="number">0</span>);</div></pre></td></tr></table></figure>
<p>然后对然后以源点$S + n$，汇点$T$跑一边最大流就行了。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta"># <span class="meta-keyword">define</span> MAXN 123</span></div><div class="line"><span class="meta"># <span class="meta-keyword">define</span> INF 0x7fffffff</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">getc</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">1</span> &lt;&lt; <span class="number">18</span>], *fs, *ft;</div><div class="line">    <span class="keyword">return</span> (fs == ft &amp;&amp; (ft = (fs = buf) + fread(buf, <span class="number">1</span>, <span class="number">1</span> &lt;&lt; <span class="number">18</span>, <span class="built_in">stdin</span>)), fs == ft) ? EOF : *fs++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">gn</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">register</span> <span class="keyword">int</span> k = <span class="number">0</span>, f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c = getc();</div><div class="line">    <span class="keyword">for</span>(; !<span class="built_in">isdigit</span>(c); c = getc()) <span class="keyword">if</span>(c == <span class="string">'-'</span>) f = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span>(; <span class="built_in">isdigit</span>(c); c = getc()) k = k * <span class="number">10</span> + c - <span class="string">'0'</span>;</div><div class="line">    <span class="keyword">return</span> f * k;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> to, w, ne;</div><div class="line">    edge() &#123;;&#125;</div><div class="line">    edge(<span class="keyword">int</span> to_, <span class="keyword">int</span> w_, <span class="keyword">int</span> ne_) &#123;</div><div class="line">        to = to_, ne = ne_, w = w_;</div><div class="line">    &#125;</div><div class="line">&#125;e[MAXN &lt;&lt; <span class="number">5</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> cnt, head[MAXN &lt;&lt; <span class="number">1</span>], s, t, n, m;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to, <span class="keyword">int</span> w)</span> </span>&#123;</div><div class="line">    e[cnt] = edge(to, w, head[fr]), head[fr] = cnt++;</div><div class="line">    e[cnt] = edge(fr, <span class="number">0</span>, head[to]), head[to] = cnt++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> dis[MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">memset</span>(dis, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dis));</div><div class="line">    q.push(s);</div><div class="line">    dis[s] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(!q.empty()) &#123;</div><div class="line">        <span class="keyword">int</span> u = q.front();</div><div class="line">        q.pop();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = e[i].ne) &#123;</div><div class="line">            <span class="keyword">int</span> v = e[i].to;</div><div class="line">            <span class="keyword">if</span>(!~dis[v] &amp;&amp; e[i].w &gt; <span class="number">0</span>) &#123;</div><div class="line">                dis[v] = dis[u] + <span class="number">1</span>;</div><div class="line">                q.push(v);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;   </div><div class="line">    <span class="keyword">return</span> ~dis[t];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> rec = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(u == t) <span class="keyword">return</span> val;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = e[i].ne) &#123;</div><div class="line">        <span class="keyword">int</span> v = e[i].to;</div><div class="line">        <span class="keyword">if</span>(dis[v] == dis[u] + <span class="number">1</span> &amp;&amp; e[i].w &gt; <span class="number">0</span> &amp;&amp; (rec = dfs(e[i].to, min(val, e[i].w)))) &#123;</div><div class="line">            e[i].w -= rec;</div><div class="line">            e[i ^ <span class="number">1</span>].w += rec;</div><div class="line">            <span class="keyword">return</span> rec;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">max_flow</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>, u;</div><div class="line">    <span class="keyword">while</span>(bfs()) &#123;</div><div class="line">        <span class="keyword">while</span>(u = dfs(s, INF)) ans += u;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</div><div class="line">    n = gn(), m = gn(), s = gn() + n, t = gn();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) addedge(i, i + n, <span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x, y, i = <span class="number">1</span>; i &lt;= m; i++) &#123;</div><div class="line">        x = gn(), y = gn();</div><div class="line">        addedge(x + n, y, INF);</div><div class="line">        addedge(y + n, x, INF);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, max_flow());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题面描述&quot;&gt;&lt;a href=&quot;#题面描述&quot; class=&quot;headerlink&quot; title=&quot;题面描述&quot;&gt;&lt;/a&gt;题面描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;农夫约翰的奶牛们喜欢通过电邮保持联系，于是她们建立了一个奶牛电脑网络，以便互相交流。这些机器用如下
    
    </summary>
    
      <category term="题解" scheme="http://kzime.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="网络流" scheme="http://kzime.xyz/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="图论" scheme="http://kzime.xyz/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>zkw线段树！！！</title>
    <link href="http://kzime.xyz/2017/05/08/zkw/"/>
    <id>http://kzime.xyz/2017/05/08/zkw/</id>
    <published>2017-05-08T11:03:13.000Z</published>
    <updated>2017-08-18T11:01:45.330Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ZKW线段树！！！"><a href="#ZKW线段树！！！" class="headerlink" title="ZKW线段树！！！"></a>ZKW线段树！！！</h3><blockquote>
<p>出处 :  <a href="https://wenku.baidu.com/view/0c1bbba40029bd64783e2cca.html" target="_blank" rel="external">统计的力量</a> by THU张昆玮</p>
</blockquote>
<p>跟普通线段树的区别：</p>
<ol>
<li><p>非递归调用， 常数小</p>
</li>
<li><p>堆式满二叉树储存，是点树</p>
</li>
<li>信息向上传递</li>
</ol>
<p>大概来一张图来表现普通线段树与zkw<del>重口味</del>线段树的储存方式的差距。  </p>
<p>这个是普通的线段树<br><img src="http://218.28.19.228/upload/image/20170508/20170508210030_47649.bmp" alt="普通线段树"><br>zkw线段树<br><img src="http://218.28.19.228/upload/image/20170508/20170508210047_69213.bmp" alt="zkw线段树"></p>
<blockquote>
<p><del>qwq有没有dalao安利我绘图工具啊，windows自带画板快把强迫症逼死了啊啊啊啊啊</del></p>
</blockquote>
<p>是不是非常的简单明了==<br>反正就是能够发现，你可以很快的找到叶子节点的位置<br>作为二叉树，线段树的标号是这样的<br><img src="http://img.blog.csdn.net/20160326214437351" alt="二叉树"><br>转换成二进制之后是这样的<br><img src="http://img.blog.csdn.net/20160326214557758" alt="二进制"><br>很显然nd[x]的父亲节点是nd[x &gt;&gt; 1], 而nd[x]的两个儿子节点的标号分别是nd[x &lt;&lt; 1]和nd[x &lt;&lt; 1 | 1].  </p>
<p>接下来是求区间和的各个操作的演示代码</p>
<h4 id="inline-void-build"><a href="#inline-void-build" class="headerlink" title="inline void build()"></a>inline void build()</h4><p>建树十分简单<br><strong>PS</strong>: 为了保证叶子节点都在同一层，必须保证最后一层的节点数量是大于n的最小的2的幂，也就是代码中的M<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="comment">// 上传过程</span></div><div class="line">    nd[x] = nd[x &lt;&lt; <span class="number">1</span>] + nd[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span>(M &lt;= n + <span class="number">1</span>) &#123; <span class="comment">// M可以等于n 所以要M &lt;= n + 1</span></div><div class="line">        M &lt;&lt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = M + <span class="number">1</span>; i &lt;= M + n; i++) &#123; <span class="comment">// 处理叶子节点</span></div><div class="line">        nd[i] = get_num();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = M; i &gt;= <span class="number">1</span>; i--) &#123; <span class="comment">// 处理父节点</span></div><div class="line">        push_up(i);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>叶子节点所在的层上的节点数为M， 叶子结点之前的节点数也是M，然后更新过程就可以这样的优美</p>
<h4 id="inline-void-change-one-point-int-x-int-k"><a href="#inline-void-change-one-point-int-x-int-k" class="headerlink" title="inline void change_one_point(int x, int k)"></a>inline void change_one_point(int x, int k)</h4><p>单点修改的过程也是十分的简单， 只需要找到要修改的值所在的叶子节点，更新之后一路往上传就行, 时间复杂度O(logn)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">change_one_point</span><span class="params">(<span class="keyword">int</span> x , <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    x += M;</div><div class="line">	nd[x] += k;</div><div class="line">    <span class="keyword">for</span>(x &gt;&gt;= <span class="number">1</span>; x; x &gt;&gt;= <span class="number">1</span>) &#123;</div><div class="line">        push_up(x);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="inline-void-change-section-int-l-int-r-int-k"><a href="#inline-void-change-section-int-l-int-r-int-k" class="headerlink" title="inline void change_section(int l, int r, int k)"></a>inline void change_section(int l, int r, int k)</h4><p><del>这是个坑，暂时不解决</del></p>
<h4 id="inline-int-query-int-l-int-r"><a href="#inline-int-query-int-l-int-r" class="headerlink" title="inline int query(int l, int r)"></a>inline int query(int l, int r)</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(l = M + l - <span class="number">1</span>, r = M + r + <span class="number">1</span>; l ^ r ^ <span class="number">1</span>; l &gt;&gt;= <span class="number">1</span>, r &gt;&gt;= <span class="number">1</span>) &#123; <span class="comment">// l = M + l - 1, r = M + r + 1, 意思是将l 和 r 变成开区间，l ^ r ^ 1  --&gt;  not l ^ r == 1  --&gt;  l 和 r不是同一节点的两个子节点</span></div><div class="line">        <span class="keyword">if</span>(~l &amp; <span class="number">1</span>) ans += nd[l + <span class="number">1</span>];<span class="comment">// l是左子区间                       </span></div><div class="line">        <span class="keyword">if</span>(r &amp; <span class="number">1</span>) ans += nd[r - <span class="number">1</span>]; <span class="comment">// r是右子区间                       </span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一大坨毒瘤的位运算。。。<br>每个位运算的意思都在代码里解释了，如果还是感觉毒瘤可以尝试看看zkw论文里的伪代码<br><img src="http://218.28.19.228/upload/image/20170508/20170508190124_55300.png" alt="区间查询"></p>
<h4 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h4>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ZKW线段树！！！&quot;&gt;&lt;a href=&quot;#ZKW线段树！！！&quot; class=&quot;headerlink&quot; title=&quot;ZKW线段树！！！&quot;&gt;&lt;/a&gt;ZKW线段树！！！&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;出处 :  &lt;a href=&quot;https://wenku.
    
    </summary>
    
      <category term="数据结构" scheme="http://kzime.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="线段树" scheme="http://kzime.xyz/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>博客重建</title>
    <link href="http://kzime.xyz/2017/05/04/hello-world/"/>
    <id>http://kzime.xyz/2017/05/04/hello-world/</id>
    <published>2017-05-04T08:42:26.000Z</published>
    <updated>2017-08-18T11:01:45.342Z</updated>
    
    <content type="html"><![CDATA[<p>因为自己乱搞Ubuntu，在Ubuntu下进行了一些类似于  </p>
<blockquote>
<p>cd /<br>sudo rm -rf</p>
</blockquote>
<p>的错误操作，<br>导致Ubuntu系统崩盘，顺带清了一个盘<br>甚至电脑启动不了了几次<br>磁盘恢复就恢复出来几篇文章，剩下的还有自己去网上抠。。<br>惨死。。</p>
<p>嗯，就假装是一次博客升级吧，恢复文章的过程还顺便去fock了别人的一个主题，<br>估计是码代码时候熟悉黑色背景了，这款主题也是看着很舒服，也算很开心吧。<br>这次集训我在课余时间重装了数十次Ubuntu，虽然很崩溃吧，但是学到了很多， 还搞到了一个非常爽的编辑器<strong><em>atom</em></strong>， 强推。<br><strong><em>震惊！kZime看了之后连Vim都弃了！  </em></strong></p>
<p>就是这种感觉。 Vim虽然有着很棒的码代码的手感，但编译，调试时甚是麻烦，而且代码补全插件我一直搞不好qwq，就很气，但<strong><em>atom</em></strong>不仅手感好，各种插件也做的很方便。有一个小细节我要点个赞，之前不管是devc还是vim，关于编码方面都处理的不是太好，vim还行，认死一个UTF-8就够了，但devc会把UTF-8的代码注释弄成乱码，在devc是的代码注释移动到vim又成乱码了，notepad++在这块做的还好，至少可以很方便的转换编码。<strong><em>atom</em></strong>而可以直接在编辑器右下角调成自动选择编码模式，这样就很爽了。而且atom作为github的产品，开源免费是必须的，还可以直接在atom呢下载github上的插件，主题。vim模式插件不用说，连Emacs插件也有。还有强大的自定义功能，加上几个插件， 就可以说是IDE了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为自己乱搞Ubuntu，在Ubuntu下进行了一些类似于  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;cd /&lt;br&gt;sudo rm -rf&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;的错误操作，&lt;br&gt;导致Ubuntu系统崩盘，顺带清了一个盘&lt;br&gt;甚至电脑启动不了了几
    
    </summary>
    
      <category term="blog" scheme="http://kzime.xyz/categories/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>HAOI2017游记</title>
    <link href="http://kzime.xyz/2017/04/22/HAOI2017/"/>
    <id>http://kzime.xyz/2017/04/22/HAOI2017/</id>
    <published>2017-04-22T00:18:51.000Z</published>
    <updated>2017-08-18T11:01:45.314Z</updated>
    
    <content type="html"><![CDATA[<p>OI生涯经历的第一场省选，惨烈无比<br>纪念syz18界学长 XTT, TYS, DCH<br>ssy18界学长学姐 MK, KZNS, 农场主， 克泽风，</p>
<hr>
<h3 id="DAY-7"><a href="#DAY-7" class="headerlink" title="DAY -7"></a>DAY -7</h3><p>  周日和一群dalao去参加轻院校赛，和wb，学长tys一队，队名很鬼畜。<br>  开考读题，直接把一道看上去很水的最短路D递给tys了，然后wb继续看题，我看着tys码spfa，感觉没什么问题犹豫了一下，提交了，直接RE，开门GG，心态全无，感觉是边数开小了，又交了一次，仍然RE。。慌得直接换题。然后我和wb讨论A题的三维坐标下点到直线的距离，推广不出来。换题，看到E题以为是个很简单的贪心，交给tys，打着打着突然感觉不对劲，少考虑好多影响（结束后问了才知道是个网络流。。。，考试中间评测服务器掉线，写了4道题，服务器上线后交完连WA带TLE加RE。。最后只A了两道题，带着狗牌走掉。天天队伍A了8道题，拿到了rk3，一中mjl两人队A8题rk2，mjl太强了aaaa…离开的时候发誓明年再来参加一定AK全场。<br>  比完赛跟着天天，省实验的人，一中的mjl去吃饭，看速8，然后跟ldl，KZ坐出租回家</p>
<h3 id="DAY-6-3"><a href="#DAY-6-3" class="headerlink" title="DAY -6 ~ -3"></a>DAY -6 ~ -3</h3><p>  在省实验集训，每天上午都在实验内网考试，考到中文12点， 然后我就会和wb一起去学校对面碰碰凉要不是玩王者农药，要不是码代码，平均一次A一道最水的题吧。。考完两天突然把比赛放在192.168.1.12上了，用账户条登陆。然后就体验到省实验著名的颓废机房（233。老师讲的东西基本上听不懂。。。<br>  每天晚上10点去实验操场找粽子，和她散散步，聊聊天。。。开心</p>
<h3 id="DAY-2-1"><a href="#DAY-2-1" class="headerlink" title="DAY -2 ~ -1"></a>DAY -2 ~ -1</h3><p>  白天日常，晚上刷CF，见前一篇博客。然后睡在机房，睡前和mk，zf聊了很多人，很多事，mk睡之前确定的说，感觉自己还是有很大机会进队的，自己很自信自己的水平。我们也希望mk能进队。<br>  日常，不过没比赛，今天wb没来实验，我写了写水题就跟着大家浮了起来，下午，机房里的人都去看考场或者订宾馆了，我见人少，就回家了。</p>
<h3 id="DAY-0上午"><a href="#DAY-0上午" class="headerlink" title="DAY 0上午"></a>DAY 0上午</h3><p>  早上去郑大找不到考场在哪，转了好几圈，我qq问mjl知道不知道在哪，他也表示懵逼。然后突然在路上发现一只野生的天天，就直接跟着他跑了，找到之后给mjl说考场在哪。（后来看他博客知道他是考前5分钟进的考场。<br>  到考场时已经有点晚了，赶快准备准备环境，安装安装IDE， 突然在D盘资源文件夹里看到了个smartc。我直接喊了一句woc，这玩意我前天在省实验集训的时候才在网上见过，内含各种模板，之前我还玩了半天模板里的游戏。我打开翻了翻，发现里面的代码模板没有被清除，立马预见到这次HAOI又改有问题了。。<br>  t1刚拿到的时候感觉是跟强连通分量，双联通分量什么的有关，但又没思路，就直接码暴力。码到一半脑补出了一个我解决不了的样例，对暴力的正确性产生了怀疑。然后直接放弃，t2直接按照题面意思码一个暴力出来。t3有3种操作，其中只有第一种操作就能过6个点，当时时间也不太够了，直接码起异或版spfa。但是因为样例抄错了耽误了很多时间。码完还剩两分钟玩起了smartc里的俄罗 斯方块。</p>
<h3 id="DAY-0下午"><a href="#DAY-0下午" class="headerlink" title="DAY 0下午"></a>DAY 0下午</h3><p>  出来之后表示大家写的都是暴力，心态还好。但是TYS专注码t2后缀数组，因为记错一个变量名爆零，其它题一点没码。听我说smartc上有后缀数组的模板后直接个ccf发了封邮件。<br>  下午t1看出来是个DP了，但是题面看不太明白，就先把t2的20分暴力码了，然后t1还是看不懂，就各种玩。电脑里有啥玩啥。<br>  考完mk说感觉自己要擦线进队了。<br>  天天，sxy和杨老师留在那等结果，我们直接回学校，回家。<br>  回家睡到7点回学校。</p>
<h3 id="DAY-1"><a href="#DAY-1" class="headerlink" title="DAY 1"></a>DAY 1</h3><p>  空间被mjl刷屏了，似乎评测用的lemon内存设置出问题了，好多人mle掉。又有人说下午t1数据太水，不考虑障碍情况的裸dp就过了8个点，然后这几天就各种申诉。在学校学文化课，偶尔会机房码题。</p>
<h3 id="DAY-3"><a href="#DAY-3" class="headerlink" title="DAY 3"></a>DAY 3</h3><p>  成绩出了mjl rk3强势进队，焦作一中进来3个，安阳一中进了2个，郑州一中进了2个。郑州一中的两个里还都是高一的。Rapiz被学弟擦线挤出队，rk8。省实验没有进队，其中农场主考的最高，mk也没有成功。。<br>  zsb下午t1裸dp过了8个点，120分，sxydalao110分，不知道会不会买D进队，TYS上午爆零，下午拿了90分，拿到一等，我60分，rk23，差1个点一等。。。wb，wzz爆零，天天学长。。爆零。<br>  不知道为什么，本来最有希望，最强的天天爆零了。好像因为函数名写错，文件读入输出写错。。。但感觉好可惜。<br>  然后后面的几天都没看到天天。</p>
<h3 id="DAY-5"><a href="#DAY-5" class="headerlink" title="DAY 5"></a>DAY 5</h3><p>  省选风波过去了，本来想着OI可以放一放了，学校开了运动会，mjl去济南集训了，cogs上一个邯郸一中的好友也问我要不要去济南，我就自己一人出发了，走上了自己的路。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OI生涯经历的第一场省选，惨烈无比&lt;br&gt;纪念syz18界学长 XTT, TYS, DCH&lt;br&gt;ssy18界学长学姐 MK, KZNS, 农场主， 克泽风，&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;DAY-7&quot;&gt;&lt;a href=&quot;#DAY-7&quot; class=&quot;headerlin
    
    </summary>
    
    
      <category term="比赛" scheme="http://kzime.xyz/tags/%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>CF#410div2</title>
    <link href="http://kzime.xyz/2017/04/22/CF-410div2/"/>
    <id>http://kzime.xyz/2017/04/22/CF-410div2/</id>
    <published>2017-04-22T00:18:51.000Z</published>
    <updated>2017-08-18T11:01:45.346Z</updated>
    
    <content type="html"><![CDATA[<p>这次比赛是真的开心，是在省选集训的时候和省实验的zf和mk一起打的，先是打到11点45， 然后跑到楼下创客活动室躲到比赛结束才会楼上机房，正准备继续写题的时候去组团上厕所的mk和zf突然跑回来让关灯躲起来，躲到凌晨1点才敢开灯，就直接去睡觉了。睡前和mk，zf聊了很多。</p>
<p><strong>真心祝愿MK学长省选进队！！</strong>（不是奶</p>
<p>明天就是省选了    </p>
<blockquote>
<p>JLOI, HEOI, HLOI, SHOI, SNOI, HAOI, SXOI, FJOI, LNOI, GZOI</p>
</blockquote>
<p><strong><em>BLESS ALL</em></strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(<span class="literal">true</span>) RP++;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这次比赛是真的开心，是在省选集训的时候和省实验的zf和mk一起打的，先是打到11点45， 然后跑到楼下创客活动室躲到比赛结束才会楼上机房，正准备继续写题的时候去组团上厕所的mk和zf突然跑回来让关灯躲起来，躲到凌晨1点才敢开灯，就直接去睡觉了。睡前和mk，zf聊了很多。&lt;/
    
    </summary>
    
    
      <category term="比赛" scheme="http://kzime.xyz/tags/%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>CF#408div2</title>
    <link href="http://kzime.xyz/2017/04/11/CF-408div2/"/>
    <id>http://kzime.xyz/2017/04/11/CF-408div2/</id>
    <published>2017-04-10T18:55:51.000Z</published>
    <updated>2017-08-18T11:01:45.350Z</updated>
    
    <content type="html"><![CDATA[<p>第一次在晚上熬夜打CF，虽然准备的很充足，但还是只A了两道模拟，其中B题还被HACK掉了一次。。。经过mly的指点才把HACK点改掉，然后就是C，刚开始没思路，dalao们确认贪心可做之后就开始瞎JB贪了起来，然后WAWAWAWAWA。。。。<br>结果rating–<br>瘫</p>
<p>多做题吧，骚年</p>
<p>QAQ</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次在晚上熬夜打CF，虽然准备的很充足，但还是只A了两道模拟，其中B题还被HACK掉了一次。。。经过mly的指点才把HACK点改掉，然后就是C，刚开始没思路，dalao们确认贪心可做之后就开始瞎JB贪了起来，然后WAWAWAWAWA。。。。&lt;br&gt;结果rating–&lt;br
    
    </summary>
    
    
      <category term="比赛" scheme="http://kzime.xyz/tags/%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>HAOI2014遥感监测题解</title>
    <link href="http://kzime.xyz/2017/03/27/ha14%E6%91%87%E6%9D%86%E7%9B%91%E6%B5%8B/"/>
    <id>http://kzime.xyz/2017/03/27/ha14摇杆监测/</id>
    <published>2017-03-27T07:06:26.000Z</published>
    <updated>2017-08-18T11:01:45.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HAOI2014-遥感监测"><a href="#HAOI2014-遥感监测" class="headerlink" title="[HAOI2014]遥感监测"></a><a href="#HAOI2014-遥感监测" title="[HAOI2014]遥感监测"></a><a href="http://cogs.pro/cogs/problem/problem.php?pid=1679" target="_blank" rel="external">[HAOI2014]遥感监测</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="#题目描述" title="题目描述"></a>题目描述</h2><blockquote>
<p>外星人指的是地球以外的智慧生命。外星人长的是不是与地球上的人一样并不重要，但起码应该符合我们目前对生命基本形式的认识。比如，我们所知的任何生命都离不开液态水，并且都是基于化学元素碳（C）的有机分子组合成的复杂有机体。<br><a id="more"></a><br>ZDM实验室的天文学家们已经执著地观测ZDM-99星球十多年了，这个被称为“战神”的红色星球让他如此着迷。在过去的十多年中，他经常有一些令人激动的发现。ZDM-99星球表面有着明显的明暗变化。对这些明暗区域，天文学家们已经细致地研究了很多年，并且绘制出了较为详尽的地图，那些暗区是陆地，而亮区则是湖泊和海洋。他们一直坚信有水的地方，一定有生命的痕迹。</p>
<p>这天晚上的观测条件实在是空前的好，ZDM-99星球也十分明亮，不时呈现出若干个激光点，天文学家们推定这些激光点极有可能存在地球以外的智慧生命。遗憾的是仅持续很短的一段时间，这些激光点就消失了。</p>
<p>ZDM实验室的射电望远镜观测的区域有限，只可以遥感检测到一个半径为R的圆形区域。为了能同时能检测到所有的激光点，ZDM实验室需要要在一个水平的直线上尽快地安装多个的射电望远镜来。</p>
<p>不妨设，这条安放射电望远镜的水平直线为X轴，ZDM-99星球激光点就处在P1（x1,y1）P2(x2,y2)  ，…… ，Pn(xn,yn)。（忽略Z坐标）<br><a href="http://218.28.19.228/upload/image/20140718/20140718164645_17219.png" target="_blank" rel="external"><img src="http://218.28.19.228/upload/image/20140718/20140718164645_17219.png" alt=""></a><br>ZDM实验室的天文学家们想知道，至少需要安装多少个射电望远镜才能检测到所有激光点。</p>
</blockquote>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a><a href="#输入格式" title="输入格式"></a>输入格式</h2><blockquote>
<p>第1行:  N   R   分别表示激光点的个数和射电望远镜能检测到的半径<br>第2~N+1行： Xi  Yi      表示 激光点的坐标位置</p>
</blockquote>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a><a href="#输出格式" title="输出格式"></a>输出格式</h2><blockquote>
<p>输出一行： 最少需要安装的射电望远镜数。</p>
</blockquote>
<h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a><a href="#样例输入" title="样例输入"></a>样例输入</h2><blockquote>
<p>3 2<br>1 2<br>-3 1<br>2 1</p>
</blockquote>
<h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a><a href="#样例输出" title="样例输出"></a>样例输出</h2><blockquote>
<p>2</p>
</blockquote>
<h2 id="约束条件"><a href="#约束条件" class="headerlink" title="约束条件"></a><a href="#约束条件" title="约束条件"></a>约束条件</h2><blockquote>
<p>1≤R≤50     1≤N≤100   -1000≤ Xi  Yi ≤ 1000     | Yi | ≤ R<br>N，R, Xi  Yi都是整数。数据之间有一个空格。</p>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a><a href="#题解" title="题解"></a>题解</h2><p>大概是个贪心，找出能保证包住最靠左的激光点的最靠右边的x轴坐标，但是枚举所以点时间复杂度明显太高，所以换一种思路，使用结构体处理出每个激光点所能被包住的可以作为望远镜的可行区间</p>
<p><a href="http://218.28.19.228/upload/image/20170327/20170327094625_62844.png" target="_blank" rel="external"><img src="http://218.28.19.228/upload/image/20170327/20170327094625_62844.png" alt=""></a><br>处理方法很简单<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</div><div class="line">	<span class="keyword">double</span> fan=<span class="built_in">sqrt</span>(<span class="built_in">pow</span>(r,<span class="number">2</span>)-<span class="built_in">pow</span>(p[i].y,<span class="number">2</span>));<span class="comment">//pow()是n次方函数pow(x,n)表示x的n次方</span></div><div class="line">	p[i].l=p[i].x-fan;</div><div class="line">	p[i].r=p[i].x+fan;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后对处理后的区间按照右端点进行排序(请同学们自主思考：为什么是右端点)然后进行统计<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> k=<span class="number">1</span>, ans=<span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</div><div class="line">	<span class="keyword">if</span>(p[i].l&lt;=p[k].r)&#123;<span class="comment">//p[k].r点可观测到点i</span></div><div class="line">		<span class="keyword">continue</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;<span class="comment">//更新k</span></div><div class="line">		k=i;</div><div class="line">		ans++;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后放一下全部代码</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a><a href="#代码实现" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ans,r,n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> k=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> c=getchar();</div><div class="line">	<span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);c=getchar())<span class="keyword">if</span>(c==<span class="string">'-'</span>)f=<span class="number">-1</span>;</div><div class="line">	<span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);c=getchar())k=k*<span class="number">10</span>+c-<span class="string">'0'</span>;</div><div class="line">	<span class="keyword">return</span> k*f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">mp</span>&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">	<span class="keyword">int</span> x;</div><div class="line">	<span class="keyword">int</span> y;</div><div class="line">	<span class="keyword">double</span> l;</div><div class="line">	<span class="keyword">double</span> r;</div><div class="line">&#125;p[<span class="number">2333</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(mp a,mp b)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> a.r&lt;b.r;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	freopen(<span class="string">"ha14a.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">	freopen(<span class="string">"ha14a.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div><div class="line">	n=read();</div><div class="line">	r=read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</div><div class="line">		p[i].x=read();</div><div class="line">		p[i].y=read();</div><div class="line">		<span class="keyword">if</span>(<span class="built_in">abs</span>(p[i].y)&gt;r)&#123;</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>;</div><div class="line">			<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</div><div class="line">		<span class="keyword">double</span> fan=<span class="built_in">sqrt</span>(<span class="built_in">pow</span>(r,<span class="number">2</span>)-<span class="built_in">pow</span>(p[i].y,<span class="number">2</span>));</div><div class="line">		p[i].l=p[i].x-fan;</div><div class="line">		p[i].r=p[i].x+fan;</div><div class="line">	&#125;</div><div class="line">	sort(p+<span class="number">1</span>,p+<span class="number">1</span>+n,cmp);</div><div class="line">	<span class="keyword">int</span> k=<span class="number">1</span>;</div><div class="line">	ans=<span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</div><div class="line">		<span class="keyword">if</span>(p[i].l&lt;=p[k].r)&#123;</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			k=i;</div><div class="line">			ans++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HAOI2014-遥感监测&quot;&gt;&lt;a href=&quot;#HAOI2014-遥感监测&quot; class=&quot;headerlink&quot; title=&quot;[HAOI2014]遥感监测&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#HAOI2014-遥感监测&quot; title=&quot;[HAOI2014]遥感监测
    
    </summary>
    
      <category term="题解" scheme="http://kzime.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="HAOI" scheme="http://kzime.xyz/tags/HAOI/"/>
    
      <category term="贪心" scheme="http://kzime.xyz/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>纪念12Dora</title>
    <link href="http://kzime.xyz/2017/03/25/12dora/"/>
    <id>http://kzime.xyz/2017/03/25/12dora/</id>
    <published>2017-03-25T07:11:32.000Z</published>
    <updated>2017-08-18T11:01:45.326Z</updated>
    
    <content type="html"><![CDATA[<p>“我所做的一切都是为了守护我亲爱的B站”。<br>        ———— 12dora</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“我所做的一切都是为了守护我亲爱的B站”。&lt;br&gt;        ———— 12dora&lt;/p&gt;

    
    </summary>
    
      <category term="随笔" scheme="http://kzime.xyz/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>HAOI2013题解</title>
    <link href="http://kzime.xyz/2017/03/20/HAOI2013%E9%A2%98%E8%A7%A3/"/>
    <id>http://kzime.xyz/2017/03/20/HAOI2013题解/</id>
    <published>2017-03-20T07:06:26.000Z</published>
    <updated>2017-08-18T11:01:45.330Z</updated>
    
    <content type="html"><![CDATA[<p>HAOI2013   的特点</p>
<blockquote>
<p><del>题水</del></p>
</blockquote>
<p>谁说的。。。<br>做了大半年的题你跟我说水。。。<br>欸，似乎真的很水。。。<br>大概是我太水吧。。。</p>
<p><a id="more"></a></p>
<h2 id="T1-HAOI2013-跑步训练"><a href="#T1-HAOI2013-跑步训练" class="headerlink" title="T1 [HAOI2013] 跑步训练"></a><a href="#T1-HAOI2013-跑步训练" title="T1 [HAOI2013] 跑步训练"></a>T1 <a href="http://cogs.pro/cogs/problem/problem.php?pid=1368" target="_blank" rel="external">[HAOI2013] 跑步训练</a></h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="#题目描述" title="题目描述"></a>题目描述</h3><blockquote>
<p>Dr.Kong准备参加冬季越野比赛。为了能在比赛中有好的发挥，他决定每天早上上班前在附近的一条山路上开始训练。他当然希望每次训练中跑得尽可能远，但他的时间有限，每天早上跑步训练的时间不得超过M秒 (1 &lt;= M &lt;= 10,000,000)。<br>为了合理的安排跑步路程，Dr.Kong将整条山路划分成T个长度相同的小段(1 &lt;= T &lt;= 100,000)，并且，分别用u，f，d这3个字母之一来表示每个小段是上坡、平地，或是下坡。 Dr.Kong要花t1秒(1 &lt;= t1 &lt;= 100)才能跑完一段上坡路，跑完一段平地的耗时是<br>t2秒(1 &lt;= t2 &lt;= 100)，跑完一段下坡路要花t3秒(1 &lt;= t3 &lt;= 100)。注意，沿山路原路返回的时候，原本是上坡路的路段变成了下坡路，原本是下坡路的路段变成了上坡路。<br>  Dr.Kong想知道，在不超过M秒内返回的前提下，他最多能在这条山路上跑多远。</p>
</blockquote>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a><a href="#输入格式" title="输入格式"></a>输入格式</h3><blockquote>
<p>第1行:  M  T  t1  t2  t3  (数据之间用一个空格隔开)</p>
<p>第2..T+1行:  每行为1个字母u或f或d，描述了相应段的山路路况（上坡、平地，或是下坡）</p>
</blockquote>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a><a href="#输出格式" title="输出格式"></a>输出格式</h3><blockquote>
<p>输出1个整数，为Dr.Kong在不超时回到的前提下，最多能跑到几段。</p>
</blockquote>
<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a><a href="#样例输入" title="样例输入"></a>样例输入</h3><blockquote>
<p>13 5 3 2 1<br>u<br>f<br>u<br>d<br>f</p>
</blockquote>
<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a><a href="#样例输出" title="样例输出"></a>样例输出</h3><blockquote>
<p>3</p>
</blockquote>
<p> cogs评分半星。。。</p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a><a href="#解法" title="解法"></a>解法</h3><p>   就是用一个整型s存达到当前步数要走的来回的耗时<br>       然后每走一段路程加上耗时与返回时的耗时，s &gt; M 并且step &lt;= t时结束程序，输出step - 1</p>
<h3 id="贴代码"><a href="#贴代码" class="headerlink" title="贴代码"></a><a href="#贴代码" title="贴代码"></a>贴代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*kZime*/</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> k = <span class="number">0</span>, f = <span class="number">1</span>; <span class="keyword">char</span> c = getchar();</div><div class="line">	<span class="keyword">for</span>(; !<span class="built_in">isdigit</span>(c); c = getchar())<span class="keyword">if</span>(c == <span class="string">'-'</span>) f = <span class="number">-1</span>;</div><div class="line">	<span class="keyword">for</span>(; <span class="built_in">isdigit</span>(c); c = getchar()) k = k * <span class="number">10</span> + c - <span class="string">'0'</span>;</div><div class="line">	<span class="keyword">return</span> k * f;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">in_char</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">char</span> c = getchar();</div><div class="line">	<span class="keyword">for</span>(; !<span class="built_in">isalpha</span>(c); c = getchar());</div><div class="line">	<span class="keyword">return</span> c;</div><div class="line">&#125;</div><div class="line">/-----------------------------------------------------------------------------*/</div><div class="line"><span class="keyword">int</span> v[<span class="number">3</span>] , m, t, s = <span class="number">0</span>, step = <span class="number">0</span>;<span class="comment">// v[3] 表示3种地形的速度</span></div><div class="line"><span class="keyword">char</span> c[<span class="number">100233</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MYLAB</span></div><div class="line">	freopen(<span class="string">"HAOI2013T1.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">	freopen(<span class="string">"HAOI2013T1.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">	freopen(<span class="string">"in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">	m = read();</div><div class="line">	t = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span>; i++) &#123;</div><div class="line">		v[i] = read();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; i++) &#123;</div><div class="line">		c[i] = in_char();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">while</span>(s &lt;= m &amp;&amp; step &lt;= t) &#123;</div><div class="line">		<span class="keyword">if</span>(c[step] != <span class="string">'f'</span>) &#123; <span class="comment">// 如果step这一段地形不是平地，总耗时s增加v[0] + v[2]</span></div><div class="line">			s += v[<span class="number">0</span>] + v[<span class="number">2</span>];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;<span class="comment">//如果是平地，则总耗时增加两倍的平地耗时</span></div><div class="line">			s += v[<span class="number">1</span>] &lt;&lt; <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		step++;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>,--step);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="T2-HAOI2013-花卉节"><a href="#T2-HAOI2013-花卉节" class="headerlink" title="T2[HAOI2013] 花卉节"></a><a href="#T2-HAOI2013-花卉节" title="T2[HAOI2013] 花卉节"></a>T2<a href="http://cogs.pro/cogs/problem/problem.php?pid=1367" target="_blank" rel="external">[HAOI2013] 花卉节</a></h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a><a href="#题目描述-1" title="题目描述"></a>题目描述</h3><blockquote>
<p>ZZ市准备在绿博园举办一次花卉节。Dr.Kong接受到一个任务，要买一批花卉进行布置园林。<br>能投入买花卉的资金只有B元 (1 &lt;= B &lt;= 10^18) 。Dr.Kong决定做一个社会调查，统计一下市民们都喜欢哪种花卉，以便在有限的资金范围内，让更多的市民都能找到并标注一盆自己喜欢的花卉（一盆花只能一位市民标注）。<br>经调查统计，市场上有N (1 &lt;= N&lt;=100,000)种不同类型的花卉，第i种花卉的价格是Pi(1 &lt;= Pi &lt;= 10^18) 。有Ci (1 &lt;= Ci &lt;= 10^18) 个市民喜欢。<br>你能帮助Dr.Kong计算一下，在不透支的情况下，如何购买花卉才能让更多的市民都能找到并标注一盆自己喜欢的花卉？<br>例如：Dr.Kong 有 50块钱，有5种不同类型的花卉：<br><a href="http://218.28.19.228/upload/image/20170320/20170320172631_36113.png" target="_blank" rel="external"><img src="http://218.28.19.228/upload/image/20170320/20170320172631_36113.png" alt="HAOI2013T2"></a><br>显然，Dr.Kong不能购买第5种类型的花卉,因为他不够钱。<br>下面的购买方案是最优的：<br>第1种花卉买3盆；第2种花卉买1盆；第3种花卉买2盆；第4种花卉买2盆。<br>总共花费：5_3+1_1+10_2+7_2=50，这样，Dr.Kong 最多能让3+1+2+2 =8 人满意。</p>
</blockquote>
<h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a><a href="#输入格式-1" title="输入格式"></a>输入格式</h3><blockquote>
<p>第1行:   N  B<br>第2..N+1行:  Pi Ci   （i=1，2，….，N）。</p>
</blockquote>
<h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a><a href="#输出格式-1" title="输出格式"></a>输出格式</h3><blockquote>
<p>一个整数，最多可以让多少市民满意。</p>
</blockquote>
<h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a><a href="#样例输入-1" title="样例输入"></a>样例输入</h3><blockquote>
<p>5 50<br>5 3<br>1 1<br>10 4<br>7 2<br>60 1</p>
</blockquote>
<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a><a href="#样例输出-1" title="样例输出"></a>样例输出</h3><blockquote>
<p>8</p>
</blockquote>
<h3 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a><a href="#解法-1" title="解法"></a>解法</h3><p>算是一道很简单的贪心吧（是吧，反之就是很水，但因为要用到高精所以不水了（其实还是很水吧。。。<br>先将所有花的种类按照价格从小到大排序，然后尽可能多买便宜的花就行了，所以真的水<del>我也就WA了3遍</del></p>
<h3 id="贴代码-1"><a href="#贴代码-1" class="headerlink" title="贴代码"></a><a href="#贴代码-1" title="贴代码"></a>贴代码</h3><p>先把低精的代码贴上来</p>
<h4 id="低精50分版"><a href="#低精50分版" class="headerlink" title="低精50分版"></a><a href="#低精50分版" title="低精50分版"></a>低精50分版</h4><p><del>高精版随后贴上3/20/2017 6:30:43 PM</del><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*kZime*/</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1000000</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> k = <span class="number">0</span>, f = <span class="number">1</span>; <span class="keyword">char</span> c = getchar();</div><div class="line">	<span class="keyword">for</span>(; !<span class="built_in">isdigit</span>(c); c = getchar())<span class="keyword">if</span>(c == <span class="string">'-'</span>) f = <span class="number">-1</span>;</div><div class="line">	<span class="keyword">for</span>(; <span class="built_in">isdigit</span>(c); c = getchar()) k = k * <span class="number">10</span> + c - <span class="string">'0'</span>;</div><div class="line">	<span class="keyword">return</span> k * f;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*-----------------------------------------------------------------------------*/</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">f</span>&#123;</span></div><div class="line">	<span class="keyword">int</span> p, w;</div><div class="line">&#125;fl[MAXN];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(f a, f b)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> a.w &lt; b.w;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MYLAB</span></div><div class="line">	freopen(<span class="string">"haoi13_t2.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">	freopen(<span class="string">"haoi13_t2.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">	freopen(<span class="string">"in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">	n = read();</div><div class="line">	m = read();</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">		fl[i].w = read();</div><div class="line">		fl[i].p = read();</div><div class="line">	&#125;</div><div class="line">	sort(fl, fl + n, cmp);</div><div class="line"></div><div class="line">	<span class="keyword">int</span> s = <span class="number">0</span>, i = <span class="number">0</span>, ans = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(s &lt;= m &amp;&amp; i &lt; n) &#123;</div><div class="line">		<span class="keyword">int</span> temp = fl[i].p * fl[i].w;</div><div class="line">		<span class="keyword">if</span>(temp + s &lt; m) &#123;</div><div class="line">			s += temp;</div><div class="line">			ans += fl[i].p;</div><div class="line">			i++;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			ans += (m - s) / fl[i].w;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="高精全A版"><a href="#高精全A版" class="headerlink" title="高精全A版"></a><a href="#高精全A版" title="高精全A版"></a>高精全A版</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*kZime*/</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1000000</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long  </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function">ull <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">	ull k = <span class="number">0</span>, f = <span class="number">1</span>; <span class="keyword">char</span> c = getchar();</div><div class="line">	<span class="keyword">for</span>(; !<span class="built_in">isdigit</span>(c); c = getchar())<span class="keyword">if</span>(c == <span class="string">'-'</span>) f = <span class="number">-1</span>;</div><div class="line">	<span class="keyword">for</span>(; <span class="built_in">isdigit</span>(c); c = getchar()) k = k * <span class="number">10</span> + c - <span class="string">'0'</span>;</div><div class="line">	<span class="keyword">return</span> k * f;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*-----------------------------------------------------------------------------*/</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">f</span>&#123;</span></div><div class="line">	ull p, w;</div><div class="line">&#125;fl[MAXN];</div><div class="line">ull n, m;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">bn</span>&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">	ull s[<span class="number">101</span>], l;</div><div class="line">	<span class="built_in">string</span> str;</div><div class="line">	bn() &#123;</div><div class="line">		<span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</div><div class="line">		l = <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	bn <span class="keyword">operator</span> + (<span class="keyword">const</span> ull &amp;b) &#123;</div><div class="line">		s[<span class="number">0</span>] += b;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l || s[i]; i++) &#123;</div><div class="line">			s[i + <span class="number">1</span>] += s[i] / <span class="number">10</span>;</div><div class="line">			s[i] %= <span class="number">10</span>;</div><div class="line">			<span class="keyword">if</span>(i &gt; l) l = i;</div><div class="line">		&#125;</div><div class="line">		l++;</div><div class="line">		<span class="keyword">while</span>(!s[l - <span class="number">1</span>]) l--;</div><div class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = l - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">			<span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span>) s[i];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(f a, f b)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> a.w &lt; b.w;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MYLAB</span></div><div class="line">	freopen(<span class="string">"haoi13_t2.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">	freopen(<span class="string">"haoi13_t2.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">	freopen(<span class="string">"in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">	n = read();</div><div class="line">	m = read();</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(ull i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">		fl[i].w = read();</div><div class="line">		fl[i].p = read();</div><div class="line">	&#125;</div><div class="line">	sort(fl, fl + n, cmp);</div><div class="line"></div><div class="line">	ull s = <span class="number">0</span>, i = <span class="number">0</span>;</div><div class="line">	bn ans;</div><div class="line">	<span class="keyword">while</span>(s &lt;= m &amp;&amp; i &lt; n) &#123;</div><div class="line">		ull temp = fl[i].p * fl[i].w;</div><div class="line">		<span class="keyword">if</span>(temp + s &lt; m) &#123;</div><div class="line">			s += temp;</div><div class="line">			ans = ans + fl[i].p;</div><div class="line">			i++;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			ans = ans + (m - s) / fl[i].w;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	ans.output();</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="long-long-全A版"><a href="#long-long-全A版" class="headerlink" title="long long 全A版"></a><a href="#long-long-全A版" title="long long 全A版"></a>long long 全A版</h4><p>打完高精之后看了看天天的rank2代码突然发现不加高精也能过，然后就换了个结构自己码了一遍，但跑的还是没有天天的快，<strong>气哭</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*kZime*/</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1000000</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">	ll k = <span class="number">0</span>, f = <span class="number">1</span>; <span class="keyword">char</span> c = getchar();</div><div class="line">	<span class="keyword">for</span>(; !<span class="built_in">isdigit</span>(c); c = getchar())<span class="keyword">if</span>(c == <span class="string">'-'</span>) f = <span class="number">-1</span>;</div><div class="line">	<span class="keyword">for</span>(; <span class="built_in">isdigit</span>(c); c = getchar()) k = k * <span class="number">10</span> + c - <span class="string">'0'</span>;</div><div class="line">	<span class="keyword">return</span> k * f;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*-----------------------------------------------------------------------------*/</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">f</span>&#123;</span></div><div class="line">	ll p, w;</div><div class="line">&#125;fl[MAXN];</div><div class="line">ll n, m;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(f a, f b)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> a.w &lt; b.w;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MYLAB</span></div><div class="line">	freopen(<span class="string">"haoi13_t2.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">	freopen(<span class="string">"haoi13_t2.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">	freopen(<span class="string">"in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">	n = read();</div><div class="line">	m = read();</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(ll i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">		fl[i].w = read();</div><div class="line">		fl[i].p = read();</div><div class="line">	&#125;</div><div class="line">	sort(fl, fl + n, cmp);</div><div class="line"></div><div class="line">	ll i = <span class="number">0</span>, ans = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(i &lt; n) &#123; <span class="comment">//花种类总数n 当前剩余可支配资金m</span></div><div class="line">		ll temp = m / fl[i].w; <span class="comment">//选择当前花种最多可以满足市民总数temp</span></div><div class="line">		<span class="keyword">if</span>(temp &gt; fl[i].p) &#123;</div><div class="line">			ans += fl[i].p;</div><div class="line">			m -= fl[i].p * fl[i].w;</div><div class="line">			i++;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			ans += temp;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="T3-HAOI2013-开关控制"><a href="#T3-HAOI2013-开关控制" class="headerlink" title="T3[HAOI2013] 开关控制"></a><a href="#T3-HAOI2013-开关控制" title="T3[HAOI2013] 开关控制"></a>T3<a href="http://cogs.pro/cogs/problem/problem.php?pid=1371" target="_blank" rel="external">[HAOI2013] 开关控制</a></h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a><a href="#题目描述-2" title="题目描述"></a>题目描述</h3><blockquote>
<p>元宵节快要到了，某城市人民公园将举办一次灯展。Dr.Kong准备设计出一个奇妙的展品，他计划将编号为1到N的N（1 &lt;= N &lt;= 35）盏灯放置在一个有M条（1 &lt;= M &lt;= 595）边连接的网络节点上。</p>
<p>   每盏灯上面都带有一個开关。当按下某一盏灯的开关時，这盏灯本身以及与之有边相连的灯的状态就会改变。状态改变指的是：当一盏灯是亮时，就会被关闭；当一盏灯是关闭时，就会被打开亮着。</p>
<p>现在的问题是，你能帮助Dr.Kong计算一下最少要按下多少个开关，才能把所有的灯都打开亮着（初始状态：所有的灯都是关闭的）。</p>
<p>数据保证至少有一种按开关的方案，使得所有的灯都能被重新打开。</p>
</blockquote>
<h3 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a><a href="#输入格式-2" title="输入格式"></a>输入格式</h3><blockquote>
<p>第1行:   N  M<br>第2到第M+1行：每一行有两个由空格隔开的整數，表示两盏灯被一条边连接。</p>
</blockquote>
<h3 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a><a href="#输出格式-2" title="输出格式"></a>输出格式</h3><blockquote>
<p>一个整数，表示要把所有的灯都打开时，最少需要按下的开关次数。</p>
</blockquote>
<h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a><a href="#样例输入-2" title="样例输入"></a>样例输入</h3><blockquote>
<p>5 6<br>1 2<br>1 3<br>4 2<br>3 4<br>2 5<br>5 3</p>
</blockquote>
<h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a><a href="#样例输出-2" title="样例输出"></a>样例输出</h3><blockquote>
<p>3</p>
</blockquote>
<h3 id="解法-2"><a href="#解法-2" class="headerlink" title="解法"></a><a href="#解法-2" title="解法"></a>解法</h3><p>听天天讲了好久终于搞明白怎么做了。。。<br>首先，证明每个灯按2次之后的的状态和按2次前的状态一样，因此<strong>每个灯最多按一次</strong>。<br>   其次，想要让保证当前灯的状态是亮着，前提条件是<strong>与这个灯相连的灯（包括当前灯）中有奇数个灯的按钮被按过</strong>。设g[i][j]表示灯i是否连接到灯j,x[i]表示i这个灯是否被按过。由这条性质，我们发现，可以列出一个方程(xor 为 异或^)<br>异或的性质：相同为0，不同为1<br><a href="http://218.28.19.228/upload/image/20170326/20170326223806_54672.png" target="_blank" rel="external"><img src="http://218.28.19.228/upload/image/20170326/20170326223806_54672.png" alt="异或方程组"></a><br>然后就是运用高斯消元，讲方程系数消到一个上三角矩阵。  代码实现<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;<span class="comment">//循环的是列</span></div><div class="line">	free_yuan[i] = <span class="number">1</span>; <span class="comment">//初始化i行是自由元</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt;= n; j++) &#123;<span class="comment">//从i~n循环行</span></div><div class="line">	    <span class="keyword">if</span>(!a[j][i]) <span class="keyword">continue</span>;<span class="comment">//如果第j行第i个系数为0，继续</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> k = i; k &lt;= n; k++) &#123;<span class="comment">//交换发现i行j行</span></div><div class="line">			swap(a[i][k], a[j][k]);</div><div class="line">		&#125;</div><div class="line">		swap(a[i][<span class="number">0</span>], a[j][<span class="number">0</span>]);<span class="comment">//a[i][0]存的是第i行的解（1），别人的代码可能是a[i][n + 1]</span></div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(!a[i][i]) <span class="keyword">continue</span>; <span class="comment">//这行存在有自由元</span></div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		free_yuan[i] = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) &#123;<span class="comment">//进行消元操作</span></div><div class="line">			<span class="keyword">if</span> (!a[j][i]) <span class="keyword">continue</span>;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt;= n; k++) a[j][k] ^= a[i][k];</div><div class="line">			a[j][<span class="number">0</span>] ^= a[i][<span class="number">0</span>];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>消元之后，因为存在自由元的i行的灯xi可选择开，也可选择不开，因此要进行dfs找结果<br>代码实现<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> tmp)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span>(tmp &gt; ans) <span class="keyword">return</span>;</div><div class="line">	<span class="keyword">if</span>(now &lt;= <span class="number">0</span>) &#123;</div><div class="line">		ans = min(ans, tmp);</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">    <span class="comment">//深搜边界</span></div><div class="line">	<span class="keyword">if</span>(free_yuan[now]) &#123;<span class="comment">//如果now行为自由元</span></div><div class="line">		slt[now] = <span class="number">1</span>;</div><div class="line">		dfs(now - <span class="number">1</span>, tmp + <span class="number">1</span>);</div><div class="line">		slt[now] = <span class="number">0</span>;</div><div class="line">		dfs(now - <span class="number">1</span>, tmp);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;<span class="comment">//slt[now]为灯now的状态</span></div><div class="line">		slt[now] = a[now][<span class="number">0</span>];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = now + <span class="number">1</span>; i &lt;= n; i++) &#123;<span class="comment">//利用slt[now]化简now行之前的方程组</span></div><div class="line">			<span class="keyword">if</span> (a[now][i]) slt[now] ^= slt[i];</div><div class="line">		&#125;</div><div class="line">		dfs(now - <span class="number">1</span>, tmp + slt[now]);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    dfs(n, <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="T4-HAOI2013-软件安装"><a href="#T4-HAOI2013-软件安装" class="headerlink" title="T4[HAOI2013] 软件安装"></a><a href="#T4-HAOI2013-软件安装" title="T4[HAOI2013] 软件安装"></a>T4<a href="http://cogs.pro/cogs/problem/problem.php?pid=1365" target="_blank" rel="external">[HAOI2013] 软件安装</a></h2><h3 id="解法-3"><a href="#解法-3" class="headerlink" title="解法"></a><a href="#解法-3" title="解法"></a>解法</h3><p>需要用到区间的查询与更改，所以自然而然的想到了线段树，但是困难的是线段树要维护什么。这道题要求查询符合长度要求的空区间的起始位置，所以要维护m：区间内最长空区间的长度，mp：区间最长空区间的起始位置。因为一定会有<strong>一段区间的最长空区间跨过两个子区间，而又不是两个子区间的最长空区间</strong>的情况，所以还要维护两个值lm：区间左端点之后的最长连续空区间的长度，rm：到右端点的最长连续空区间的长度。有了这4个值，才能对区间的最长空区间的起始位置进行查找。还有一点要注意的是因为<strong>优先选择左边的可行区间的起点</strong>，所以逻辑判断时候要考虑上这种情况。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><a href="#代码" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*kZime*/</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> k = <span class="number">0</span>, f = <span class="number">1</span>; <span class="keyword">char</span> c = getchar();</div><div class="line">	<span class="keyword">for</span>(; !<span class="built_in">isdigit</span>(c); c = getchar())<span class="keyword">if</span>(c == <span class="string">'-'</span>) f = <span class="number">-1</span>;</div><div class="line">	<span class="keyword">for</span>(; <span class="built_in">isdigit</span>(c); c = getchar()) k = k * <span class="number">10</span> + c - <span class="string">'0'</span>;</div><div class="line">	<span class="keyword">return</span> k * f;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*-----------------------------------------------------------------------------*/</span></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">segtree</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">	<span class="keyword">int</span> l, r, lm, rm, m, mp, tag; <span class="comment">//mp指的是最长区间的起始位置</span></div><div class="line">	segtree() &#123;</div><div class="line">		tag = <span class="number">-1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> _l, <span class="keyword">int</span> _r, <span class="keyword">int</span> _ml, <span class="keyword">int</span> _mr, <span class="keyword">int</span> _m, <span class="keyword">int</span> _mp, <span class="keyword">int</span> _tag)</span> </span>&#123;</div><div class="line">		l = _l;</div><div class="line">		r = _r;</div><div class="line">		lm = _ml;</div><div class="line">		rm = _mr;</div><div class="line">		m = _m;</div><div class="line">		mp = _mp;</div><div class="line">		tag = _tag;</div><div class="line">	&#125;</div><div class="line">&#125;nd[<span class="number">300050</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span>(l == r) &#123;</div><div class="line">		nd[x].in(l, r, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, l, <span class="number">-1</span>);</div><div class="line"> 	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</div><div class="line">		<span class="keyword">int</span> len = r - l + <span class="number">1</span>;</div><div class="line">		build(x &lt;&lt; <span class="number">1</span>, l, mid);</div><div class="line">		build(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</div><div class="line">		nd[x].in(l, r, len, len, len, l, <span class="number">-1</span>);</div><div class="line">  	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span>(nd[k].tag == <span class="number">1</span>) &#123;<span class="comment">//该区间已被占满</span></div><div class="line">		nd[k].lm = nd[k].rm = nd[k].m = nd[k].mp = <span class="number">-1</span>;</div><div class="line">		nd[k &lt;&lt; <span class="number">1</span>].tag = <span class="number">1</span>;</div><div class="line">		nd[k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].tag = <span class="number">1</span>;</div><div class="line">		nd[k].tag = <span class="number">-1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(nd[k].tag == <span class="number">0</span>) &#123;<span class="comment">//该区间为空区间</span></div><div class="line">		nd[k &lt;&lt; <span class="number">1</span>].tag = nd[k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].tag = <span class="number">0</span>;</div><div class="line">		nd[k].lm = nd[k].rm = nd[k].m = (nd[k].r - nd[k].l + <span class="number">1</span>);</div><div class="line">		nd[k].mp = nd[k].l;</div><div class="line">		nd[k].tag = <span class="number">-1</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">	push_down(k);</div><div class="line">	push_down(k &lt;&lt; <span class="number">1</span>);</div><div class="line">	push_down(k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">	<span class="keyword">int</span> x1 = nd[k &lt;&lt; <span class="number">1</span>].m , x2 = nd[k &lt;&lt; <span class="number">1</span>].rm + nd[k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].lm, x3 = nd[k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].m;</div><div class="line">	<span class="keyword">if</span>(x1 &gt;= x2 &amp;&amp; x1 &gt;= x3) &#123;         <span class="comment">// 注意！！！这三个判断是有优先级的</span></div><div class="line">		nd[k].m = x1;                  <span class="comment">// 优先级 x1 &gt; x2 &gt; x3</span></div><div class="line">		nd[k].mp = nd[k &lt;&lt; <span class="number">1</span>].mp;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(x2 &gt;= x3) &#123;</div><div class="line">		nd[k].m = x2;</div><div class="line">		nd[k].mp = nd[k &lt;&lt; <span class="number">1</span>].r - nd[k &lt;&lt; <span class="number">1</span>].rm + <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		nd[k].m = x3;</div><div class="line">		nd[k].mp = nd[k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].mp;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> lenl = nd[k &lt;&lt; <span class="number">1</span>].r - nd[k &lt;&lt; <span class="number">1</span>].l + <span class="number">1</span>;</div><div class="line">	<span class="keyword">int</span> lenr = nd[k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].r - nd[k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].l + <span class="number">1</span>;</div><div class="line">	nd[k].lm = nd[k &lt;&lt; <span class="number">1</span>].lm;</div><div class="line">	<span class="keyword">if</span>(nd[k &lt;&lt; <span class="number">1</span>].lm == lenl) &#123;</div><div class="line">		nd[k].lm = max(nd[k].lm, nd[k &lt;&lt; <span class="number">1</span>].lm + nd[k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].lm);<span class="comment">//一定要用max()函数，被占区间的rm可能为-1</span></div><div class="line">	&#125;</div><div class="line">    nd[k].rm = nd[k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].rm;</div><div class="line">	<span class="keyword">if</span>(nd[k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].rm == lenr) &#123;</div><div class="line">		nd[k].rm = max(nd[k].rm, nd[k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].rm + nd[k &lt;&lt; <span class="number">1</span>].rm);    </div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</div><div class="line">	push_down(<span class="number">1</span>);</div><div class="line">	<span class="keyword">return</span> nd[<span class="number">1</span>].m;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_the_smallest_mp</span> <span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">	push_down(k);</div><div class="line">	<span class="keyword">if</span>(nd[k].m &lt; len) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(nd[k].lm &gt;= len) <span class="keyword">return</span> nd[k].l;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(nd[k &lt;&lt; <span class="number">1</span>].m &gt;= len) <span class="keyword">return</span> get_the_smallest_mp(k &lt;&lt; <span class="number">1</span>, len);</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (nd[k &lt;&lt; <span class="number">1</span>].rm &gt;= <span class="number">0</span> &amp;&amp; nd[k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].lm &gt;= <span class="number">0</span> &amp;&amp; nd[k &lt;&lt; <span class="number">1</span>].rm + nd[k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].lm &gt;= len) <span class="keyword">return</span> (nd[k &lt;&lt; <span class="number">1</span>].r - nd[k &lt;&lt; <span class="number">1</span>].rm + <span class="number">1</span>);</div><div class="line">	<span class="keyword">else</span> <span class="keyword">return</span> get_the_smallest_mp(k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, len);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> tag)</span> </span>&#123;  <span class="comment">//更新区间</span></div><div class="line">	push_down(k);</div><div class="line">	<span class="keyword">if</span>(l &lt;= nd[k].l &amp;&amp; nd[k].r &lt;= r) &#123;</div><div class="line">		nd[k].tag = tag;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(l &gt; nd[k].r || r &lt; nd[k].l) &#123;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	change(k &lt;&lt; <span class="number">1</span>, l, r, tag);</div><div class="line">	change(k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, tag);</div><div class="line">	push_up(k);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MYLAB</span></div><div class="line">	freopen(<span class="string">"haoi13t4.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">	freopen(<span class="string">"haoi13t4.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">	freopen(<span class="string">"in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">	n = read();</div><div class="line">	m = read();</div><div class="line"></div><div class="line">	build(<span class="number">1</span>, <span class="number">1</span>, n);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</div><div class="line">		<span class="keyword">int</span> type = read();</div><div class="line">		<span class="keyword">if</span>(type == <span class="number">1</span>) &#123;<span class="comment">//安装应用</span></div><div class="line">		    <span class="keyword">int</span> len = read();</div><div class="line">			<span class="keyword">if</span>(query() &lt; len) &#123;</div><div class="line">				<span class="built_in">printf</span>(<span class="string">"0\n"</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">int</span> sm =get_the_smallest_mp(<span class="number">1</span>, len);</div><div class="line">				<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sm);</div><div class="line">				change(<span class="number">1</span>, sm, sm + len - <span class="number">1</span>, <span class="number">1</span>);<span class="comment">//tag 1 表示占用该区间</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">int</span> x = read();</div><div class="line">			<span class="keyword">int</span> len = read();</div><div class="line">			change(<span class="number">1</span>, x, x + len - <span class="number">1</span>, <span class="number">0</span>);<span class="comment">//tag 0 清空该区间</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="T5-HAOI2013-遥控器"><a href="#T5-HAOI2013-遥控器" class="headerlink" title="T5[HAOI2013] 遥控器"></a><a href="#T5-HAOI2013-遥控器" title="T5[HAOI2013] 遥控器"></a>T5<a href="http://cogs.pro/cogs/problem/problem.php?pid=1369" target="_blank" rel="external">[HAOI2013] 遥控器</a></h2><h3 id="解法-4"><a href="#解法-4" class="headerlink" title="解法"></a><a href="#解法-4" title="解法"></a>解法</h3><p>据说floyd也可以过，感觉好神奇，然而我打了一个模拟，要注意的细节很多<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*kZime*/</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> k = <span class="number">0</span>, f = <span class="number">1</span>; <span class="keyword">char</span> c = getchar();</div><div class="line">	<span class="keyword">for</span>(; !<span class="built_in">isdigit</span>(c); c = getchar())<span class="keyword">if</span>(c == <span class="string">'-'</span>) f = <span class="number">-1</span>;</div><div class="line">	<span class="keyword">for</span>(; <span class="built_in">isdigit</span>(c); c = getchar()) k = k * <span class="number">10</span> + c - <span class="string">'0'</span>;</div><div class="line">	<span class="keyword">return</span> k * f;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*-----------------------------------------------------------------------------*/</span></div><div class="line"><span class="keyword">bool</span> num[<span class="number">10</span>], up, down, _, na[<span class="number">100</span>]; <span class="comment">// nc[i] （num cost）从x到i的最小代价</span></div><div class="line">							     	<span class="comment">// na[i] （num able）是否能到达i</span></div><div class="line"><span class="keyword">int</span> x, y, ans, nc[<span class="number">100</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">3</span>; i++) &#123;</div><div class="line">		num[i] = read();</div><div class="line">	&#125;</div><div class="line">	up = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">4</span>; i &lt;= <span class="number">6</span>; i++) &#123;</div><div class="line">		num[i] = read();</div><div class="line">	&#125;</div><div class="line">	down = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">7</span>; i &lt;= <span class="number">9</span>; i++) &#123;</div><div class="line">		num[i] = read();</div><div class="line">	&#125;</div><div class="line">	_ = read();</div><div class="line">	num[<span class="number">0</span>] = read();</div><div class="line">	x = read();</div><div class="line">	y = read();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">units</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++) &#123;</div><div class="line">		<span class="keyword">if</span>(num[i]) &#123;</div><div class="line">			nc[i] = <span class="number">1</span>;</div><div class="line">			na[i] = <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tens</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span>(!_)<span class="keyword">return</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</div><div class="line">		<span class="keyword">if</span>(num[i]) &#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">9</span>; j++) &#123;</div><div class="line">				<span class="keyword">if</span>(num[j]) &#123;</div><div class="line">					nc[i * <span class="number">10</span> + j] = <span class="number">3</span>;</div><div class="line">					na[i * <span class="number">10</span> + j] = <span class="number">1</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dis_up</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;    <span class="comment">//从a一路up到b的代价</span></div><div class="line">	<span class="keyword">if</span>(b &gt;= a)<span class="keyword">return</span> b - a;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">100</span> + b - a;  <span class="comment">//up到99后回到0</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dis_down</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;  <span class="comment">//从a一路down到b的代价</span></div><div class="line">	<span class="keyword">if</span>(a &gt;= b) <span class="keyword">return</span> a - b;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">100</span> + a - b;  <span class="comment">//down到0后变成99</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">try_num</span><span class="params">()</span> </span>&#123;              <span class="comment">//尝试从x直接到y</span></div><div class="line">	<span class="keyword">if</span>(na[y]) &#123;</div><div class="line">		ans = min(nc[y], ans);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">try_up</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span>(!up) <span class="keyword">return</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">99</span>; i++) &#123;</div><div class="line">		<span class="keyword">if</span>(na[i]) &#123;</div><div class="line">			ans = min(ans, nc[i] + dis_up(i, y));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">try_down</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span>(!down) <span class="keyword">return</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">99</span>; i++) &#123;</div><div class="line">		<span class="keyword">if</span>(na[i]) &#123;</div><div class="line">			ans = min(ans, nc[i] + dis_down(i, y));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MYLAB</span></div><div class="line">	freopen(<span class="string">"HAOI2013T5.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">	freopen(<span class="string">"HAOI2013T5.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">	freopen(<span class="string">"in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">	ans = <span class="number">0x7fffffff</span>;</div><div class="line">	init();</div><div class="line">	units();</div><div class="line">	tens();</div><div class="line">	na[x] = <span class="number">1</span>;</div><div class="line">	nc[x] = <span class="number">0</span>;</div><div class="line">	try_num();</div><div class="line">	try_up();</div><div class="line">	try_down();</div><div class="line">	<span class="keyword">if</span>(ans == <span class="number">0x7fffffff</span>)<span class="built_in">printf</span>(<span class="string">"-1"</span>);</div><div class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a><a href="#写在最后" title="写在最后"></a>写在最后</h2><p>话说模块化代码真爽啊</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HAOI2013   的特点&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;del&gt;题水&lt;/del&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;谁说的。。。&lt;br&gt;做了大半年的题你跟我说水。。。&lt;br&gt;欸，似乎真的很水。。。&lt;br&gt;大概是我太水吧。。。&lt;/p&gt;
&lt;p&gt;&lt;a id
    
    </summary>
    
      <category term="题解" scheme="http://kzime.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="HAOI" scheme="http://kzime.xyz/tags/HAOI/"/>
    
  </entry>
  
  <entry>
    <title>OI</title>
    <link href="http://kzime.xyz/2017/03/18/OI/"/>
    <id>http://kzime.xyz/2017/03/18/OI/</id>
    <published>2017-03-18T07:06:26.000Z</published>
    <updated>2017-08-18T11:01:45.334Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>5日之内水完洛谷试炼场<br>听起来好lowB啊QAQ</p>
</blockquote>
<h3 id="水个p，回去整HAOI2013的题解"><a href="#水个p，回去整HAOI2013的题解" class="headerlink" title="水个p，回去整HAOI2013的题解"></a>水个p，回去整HAOI2013的题解</h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;5日之内水完洛谷试炼场&lt;br&gt;听起来好lowB啊QAQ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;水个p，回去整HAOI2013的题解&quot;&gt;&lt;a href=&quot;#水个p，回去整HAOI2013的题解&quot; class=&quot;headerlink&quot; t
    
    </summary>
    
      <category term="blog" scheme="http://kzime.xyz/categories/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>就是个测试</title>
    <link href="http://kzime.xyz/2017/03/18/test/"/>
    <id>http://kzime.xyz/2017/03/18/test/</id>
    <published>2017-03-18T01:56:54.000Z</published>
    <updated>2017-08-18T11:01:45.346Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开心开心，hexo的blog终于搞下来了"><a href="#开心开心，hexo的blog终于搞下来了" class="headerlink" title="开心开心，hexo的blog终于搞下来了"></a>开心开心，hexo的blog终于搞下来了</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"hello world"</span>);</div><div class="line">&#125;<span class="comment">/*kzime*/</span></div></pre></td></tr></table></figure>
<h1 id="先来一发hello-world"><a href="#先来一发hello-world" class="headerlink" title="先来一发hello world"></a>先来一发hello world</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;开心开心，hexo的blog终于搞下来了&quot;&gt;&lt;a href=&quot;#开心开心，hexo的blog终于搞下来了&quot; class=&quot;headerlink&quot; title=&quot;开心开心，hexo的blog终于搞下来了&quot;&gt;&lt;/a&gt;开心开心，hexo的blog终于搞下来了&lt;/h1&gt;&lt;
    
    </summary>
    
      <category term="blog" scheme="http://kzime.xyz/categories/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>CF 337A Puzzles (dp)</title>
    <link href="http://kzime.xyz/2017/02/27/CCF%20337A(Puzzles)%20%E6%B0%B4dp/"/>
    <id>http://kzime.xyz/2017/02/27/CCF 337A(Puzzles) 水dp/</id>
    <published>2017-02-27T07:06:26.000Z</published>
    <updated>2017-08-18T11:01:45.342Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><blockquote>
<p>time limit per test1 second memory limit per test256<br>megabytes inputstandard input outputstandard output The end of the<br>school year is near and Ms. Manana, the teacher, will soon have to say<br>goodbye to a yet another class. She decided to prepare a goodbye<br>present for her n students and give each of them a jigsaw puzzle<br>(which, as wikipedia states, is a tiling puzzle that requires the<br>assembly of numerous small, often oddly shaped, interlocking and<br>tessellating pieces).<br>The shop assistant told the teacher that there are m puzzles in the<br>shop, but they might differ in difficulty and size. Specifically, the<br>first jigsaw puzzle consists of f1 pieces, the second one consists of<br>f2 pieces and so on.<br>Ms. Manana doesn’t want to upset the children, so she decided that the<br>difference between the numbers of pieces in her presents must be as<br>small as possible. Let A be the number of pieces in the largest puzzle<br>that the teacher buys and B be the number of pieces in the smallest<br>such puzzle. She wants to choose such n puzzles that A - B is minimum<br>possible. Help the teacher and find the least possible value of A - B.</p>
</blockquote>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><blockquote>
<p>The first line contains space-separated integers n and m<br>(2 ≤ n ≤ m ≤ 50). The second line contains m space-separated integers<br>f1, f2, …, fm (4 ≤ fi ≤ 1000) — the quantities of pieces in the<br>puzzles sold in the shop.</p>
</blockquote>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><blockquote>
<p>Print a single integer — the least possible difference the<br>teacher can obtain.</p>
</blockquote>
<h3 id="Examples-input"><a href="#Examples-input" class="headerlink" title="Examples input"></a>Examples input</h3><blockquote>
<p>4 6<br>10 12 10 7 5 22</p>
</blockquote>
<h3 id="output"><a href="#output" class="headerlink" title="output"></a>output</h3><blockquote>
<p>5</p>
</blockquote>
<h3 id="一句话题面"><a href="#一句话题面" class="headerlink" title="一句话题面"></a>一句话题面</h3><p>从m个数中找出差值最小的n个数，然后输出这个最小的差值</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>毕竟A题，水，先排序，然后dp一下区间差值（就是区间里第i+m-1个数减去第i个数），找出最小的差值即可。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//kZime</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n,m,a[<span class="number">55</span>],dp[<span class="number">55</span>],rs=<span class="number">1000</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;<span class="keyword">char</span> f=<span class="number">1</span>,c=getchar();</div><div class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);c=getchar())<span class="keyword">if</span>(c==<span class="string">'-'</span>)f=<span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);c=getchar())k=k*<span class="number">10</span>+c-<span class="string">'0'</span>;</div><div class="line">    <span class="keyword">return</span> k*f;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	n=read();m=read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</div><div class="line">		a[i]=read();</div><div class="line">	&#125;</div><div class="line">	sort(a,a+m);</div><div class="line"><span class="comment">//	for(int i=0;i&lt;m;i++)cout&lt;&lt;a[i]&lt;&lt;" ";</span></div><div class="line"><span class="comment">//	cout&lt;&lt;endl;</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m-n+<span class="number">1</span>;i++)&#123;</div><div class="line">		dp[i]=a[i+n<span class="number">-1</span>]-a[i];</div><div class="line">		rs=min(rs,dp[i]);</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>,rs);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;time limit per test1 second memory limit per test256&lt;br&gt;m
    
    </summary>
    
      <category term="CSDN搬运" scheme="http://kzime.xyz/categories/CSDN%E6%90%AC%E8%BF%90/"/>
    
    
  </entry>
  
  <entry>
    <title>快读</title>
    <link href="http://kzime.xyz/2016/12/27/%E5%BF%AB%E8%AF%BB/"/>
    <id>http://kzime.xyz/2016/12/27/快读/</id>
    <published>2016-12-27T04:01:54.000Z</published>
    <updated>2017-08-18T11:01:45.334Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自己在CSDN的首博"><a href="#自己在CSDN的首博" class="headerlink" title="自己在CSDN的首博"></a>自己在CSDN的首博</h2><h3 id="贴贴贴"><a href="#贴贴贴" class="headerlink" title="贴贴贴"></a>贴贴贴</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;<span class="keyword">char</span> f=<span class="number">1</span>,c=getchar();</div><div class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);c=getchar())<span class="keyword">if</span>(c==<span class="string">'-'</span>)f=<span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);c=getchar())k=k*<span class="number">10</span>+c-<span class="string">'0'</span>;</div><div class="line">    <span class="keyword">return</span> k*f;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>养成敲快读的好习惯:)  </p>
<p><del>为成为毒瘤打好基础</del></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;自己在CSDN的首博&quot;&gt;&lt;a href=&quot;#自己在CSDN的首博&quot; class=&quot;headerlink&quot; title=&quot;自己在CSDN的首博&quot;&gt;&lt;/a&gt;自己在CSDN的首博&lt;/h2&gt;&lt;h3 id=&quot;贴贴贴&quot;&gt;&lt;a href=&quot;#贴贴贴&quot; class=&quot;header
    
    </summary>
    
      <category term="CSDN搬运" scheme="http://kzime.xyz/categories/CSDN%E6%90%AC%E8%BF%90/"/>
    
    
  </entry>
  
</feed>
